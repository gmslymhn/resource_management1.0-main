{"ast":null,"code":"// // 对axios进行二次封装\n\n// import axios from \"axios\"\n\n// // 1.利用axios方法create，去创建一个axios实例\n// // 2.request就是axios，为了配置一下axios\n// const requests = axios.create({\n//   // 基础路径，发请求路径中会出现/api\n//   baseURL:\"/api\",\n//   // 代表请求超时事件5s\n//   timeout:5000,\n// });\n\n// // 请求拦截器\n// requests.interceptors.request.use((config) => {\n//   // config配置对象，对象里有一个属性：headers请求头\n//   return config;\n// })\n\n// // 响应拦截器\n// requests.interceptors.response.use((res) => {\n//   // 成功回调函数\n//   return res.data\n// },(error) => {\n//   // 失败回调函数\n//   return Promise.reject(new Error(\"fail\"))\n// })\n\n// // 对外暴露\n// export default requests;\n\n// 引入axios\nimport axios from 'axios';\n// 引入提示框(以实际项目为准)\nimport { Message } from \"element-ui\";\n// 引入路由(以实际项目为准)\nimport router from '@/router';\n//引入loading组件(以实际项目为准)\nimport { Loading } from 'element-ui';\n// 创建的axios的实列 requests\nconst requests = axios.create({\n  baseURL: '/admin',\n  // 基准地址  可直接配置路径,也可代理路径(以实际项目为准)\n  timeout: 10000 // 超时时间\n});\n// 请求拦截\n// 声明变量接收logding\nlet loadingInstance;\nrequests.interceptors.request.use(config => {\n  // // 设置请求头\n  // let token = localStorage.getItem('token')\n  // config.headers.Authorization = token\n  // //设置logding配置 赋值\n  // loadingInstance = Loading.service({\n  //     lock: true,\n  //     text: '拼命加载中...',\n  //     spinner: 'el-icon-loading',\n  //     background: 'rgba(0, 0, 0, 0.7)'\n  // });\n  // 返回请求头\n  return config;\n}, err => {\n  // 请求失败返回失败信息\n  return Promise.reject(err);\n});\n\n// 响应拦截\nrequests.interceptors.response.use(res => {\n  // 响应成功则关闭loading加载\n  loadingInstance.close();\n  //返回响应数据\n  return res;\n}, err => {\n  // 响应失败则关闭loading加载  \n  setTimeout(() => {\n    loadingInstance.close();\n  }, 1000);\n  // 响应失败返回失败信息\n  return Promise.reject(err);\n});\nexport default requests;","map":{"version":3,"names":["axios","Message","router","Loading","requests","create","baseURL","timeout","loadingInstance","interceptors","request","use","config","err","Promise","reject","response","res","close","setTimeout"],"sources":["C:/Users/gmsly/Documents/GitHub/resource_management1.0-main/vue/src/api/requests.js"],"sourcesContent":["// // 对axios进行二次封装\r\n\r\n// import axios from \"axios\"\r\n\r\n// // 1.利用axios方法create，去创建一个axios实例\r\n// // 2.request就是axios，为了配置一下axios\r\n// const requests = axios.create({\r\n//   // 基础路径，发请求路径中会出现/api\r\n//   baseURL:\"/api\",\r\n//   // 代表请求超时事件5s\r\n//   timeout:5000,\r\n// });\r\n\r\n// // 请求拦截器\r\n// requests.interceptors.request.use((config) => {\r\n//   // config配置对象，对象里有一个属性：headers请求头\r\n//   return config;\r\n// })\r\n\r\n// // 响应拦截器\r\n// requests.interceptors.response.use((res) => {\r\n//   // 成功回调函数\r\n//   return res.data\r\n// },(error) => {\r\n//   // 失败回调函数\r\n//   return Promise.reject(new Error(\"fail\"))\r\n// })\r\n\r\n// // 对外暴露\r\n// export default requests;\r\n\r\n// 引入axios\r\nimport axios from 'axios'\r\n// 引入提示框(以实际项目为准)\r\nimport { Message } from \"element-ui\";\r\n// 引入路由(以实际项目为准)\r\nimport router from '@/router'\r\n//引入loading组件(以实际项目为准)\r\nimport { Loading } from 'element-ui';\r\n// 创建的axios的实列 requests\r\nconst requests = axios.create({\r\n    baseURL: '/admin', // 基准地址  可直接配置路径,也可代理路径(以实际项目为准)\r\n    timeout: 10000 // 超时时间\r\n})\r\n// 请求拦截\r\n// 声明变量接收logding\r\nlet loadingInstance\r\nrequests.interceptors.request.use((config) => {\r\n    // // 设置请求头\r\n    // let token = localStorage.getItem('token')\r\n    // config.headers.Authorization = token\r\n    // //设置logding配置 赋值\r\n    // loadingInstance = Loading.service({\r\n    //     lock: true,\r\n    //     text: '拼命加载中...',\r\n    //     spinner: 'el-icon-loading',\r\n    //     background: 'rgba(0, 0, 0, 0.7)'\r\n    // });\r\n   // 返回请求头\r\n    return config\r\n}, err => {\r\n   // 请求失败返回失败信息\r\n    return Promise.reject(err)\r\n})\r\n\r\n// 响应拦截\r\nrequests.interceptors.response.use((res) => {\r\n    // 响应成功则关闭loading加载\r\n    loadingInstance.close();\r\n    //返回响应数据\r\n    return res\r\n}, err => {\r\n    // 响应失败则关闭loading加载  \r\n    setTimeout(() => {\r\n        loadingInstance.close();\r\n    }, 1000);\r\n    // 响应失败返回失败信息\r\n    return Promise.reject(err)\r\n})\r\n\r\nexport default requests"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA,OAAOC,MAAM,MAAM,UAAU;AAC7B;AACA,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC1BC,OAAO,EAAE,QAAQ;EAAE;EACnBC,OAAO,EAAE,KAAK,CAAC;AACnB,CAAC,CAAC;AACF;AACA;AACA,IAAIC,eAAe;AACnBJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACD;EACC,OAAOA,MAAM;AACjB,CAAC,EAAEC,GAAG,IAAI;EACP;EACC,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAT,QAAQ,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAAEM,GAAG,IAAK;EACxC;EACAT,eAAe,CAACU,KAAK,CAAC,CAAC;EACvB;EACA,OAAOD,GAAG;AACd,CAAC,EAAEJ,GAAG,IAAI;EACN;EACAM,UAAU,CAAC,MAAM;IACbX,eAAe,CAACU,KAAK,CAAC,CAAC;EAC3B,CAAC,EAAE,IAAI,CAAC;EACR;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}